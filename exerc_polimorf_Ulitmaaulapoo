#include <iostream>
#include <cmath>
#include <iomanip>
using namespace std;

const double PI = 3.14159;

// Classe abstrata Forma
class Forma {
public:
    virtual double calcularArea() = 0;      
    virtual double calcularPerimetro() = 0;  
    virtual void exibirTipo() = 0;                                      
};

// Classe concreta Circulo
class Circulo : public Forma {
public:
    double raio;
    Circulo(float r) : raio(r) {}

    double calcularArea() override {
        return PI * raio * raio;
    }

    double calcularPerimetro() override {
        return 2 * PI * raio;
    }

    void exibirTipo() override {
        cout << "Círculo" << endl;
    }
};

// Classe concreta Quadrado
class Quadrado : public Forma {
public:
    double lado;
    Quadrado(double l) : lado(l) {}

    double calcularArea() override {
        return lado * lado;
    }

    double calcularPerimetro() override {
        return 4 * lado;
    }

    void exibirTipo() override {
        cout << "Quadrado" << endl;
    }
};

// Classe concreta Triangulo 
class Triangulo : public Forma {
public:
    double base;
    double altura;
    double lado1, lado2, lado3; 
    Triangulo(double b, double h, double l1, double l2, double l3)
        : base(b), altura(h), lado1(l1), lado2(l2), lado3(l3) {}

    double calcularArea() override {
        return (base * altura) / 2;
    }

    double calcularPerimetro() override {
        return lado1 + lado2 + lado3;
    }

    void exibirTipo() override {
        cout << "Triângulo" << endl;
    }
};

int main() {
    Forma* formas[3];

    formas[0] = new Circulo(5.0);
    formas[1] = new Quadrado(4.0);
    formas[2] = new Triangulo(3.0, 4.0, 3.0, 4.0, 5.0);

    for (int i = 0; i < 3; ++i) {
        if (formas[i]) { 
            formas[i]->exibirTipo();
            cout << "Área: " << fixed << setprecision(1) << formas[i]->calcularArea() << endl;
            cout << "Perímetro: " << fixed << setprecision(1) << formas[i]->calcularPerimetro() << endl;
            cout << endl;
        }
    }
    return 0;
}
